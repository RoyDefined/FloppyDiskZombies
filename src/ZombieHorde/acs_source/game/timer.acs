// @public
function void SetTimer(GameState state, int time)
{
	if (state < countdown && state > ending) {
		LogError(StrParam(d:state, s:" is not a valid game state to set time for."));
		terminate;
	}
	
	str gameStateString = state == none ? "none" :
		state == countdown ? "countdown" :
		state == playing ? "playing" :
		"ending";
	
	/* if (IsPlaying()) {
		LogWarning(StrParam(s:"Unable to set time for game state '", s:gameStateString, s:"', the game is already playing."));
		terminate;
	} */
	
	if (state == countdown) { gameContext.countDownTime = time; }
	if (state == playing)   { gameContext.playTime = time; }
	if (state == ending)    { gameContext.endingTime = time; }
	
	// Temporarely removed since it's being spammed by the timers.
	//LogDebug(StrParam(s:"Time for game state '", s:gameStateString, s:"' has changed to ", d:time, s:"."));
}

// @public
function int GetTimer(GameState state)
{
	if (state < countdown && state > ending) {
		LogError(StrParam(d:state, s:" is not a valid game state to get time for."));
		return 0;
	}
	
	if (state == countdown) { return gameContext.countDownTime; }
	if (state == playing)   { return gameContext.playTime; }
	return gameContext.endingTime;
}

// @public
function void AddTimer(GameState state, int time)
{
	SetTimer(state, GetTimer(state) + time);
}

// Increases the play timer with a visual indicator.
function void AddPlayingTimerVisual(int time)
{
	if (!GameStateIsPlaying() || gameContext.playTimerDisabled)
	{
		LogError("Unable to add visual indication to play timer increment. Timer is disabled or not shown.");
		AddPlayingTimer(time);
		return;
	}
	
	SetHudSize(480, 360, false);
			
	str formattedTime = FormatTics(time - 1, false);
	fixed x = 240.0 + FixedMul(5.0, Random(-10.0, 10.0));
	fixed y = 332.0 + FixedMul(5.0, Random(-10.0, 0.0));
	
	HudMessageBold(s:StrParam(s:"+", s:formattedTime); HUDMSG_FADEOUT, 0, CR_GREEN, x, y, 1.0, 1.0);
	AddPlayingTimer(time);
}

// @public
function void SetCountdownTimer(int time) { SetTimer(countdown, time); }

// @public
function void SetPlayingTimer(int time)   { SetTimer(playing, time); }

// @public
function void SetEndingTimer(int time)    { SetTimer(ending, time); }

// @public
function int GetCountdownTimer(void)	  { return GetTimer(countdown); }

// @public
function int GetPlayingTimer(void)		  { return GetTimer(playing); }

// @public
function int GetEndingTimer(void)		  { return GetTimer(ending); }

// @public
function void AddCountdownTimer(int time) { AddTimer(countdown, time); }

// @public
function void AddPlayingTimer(int time)	  { AddTimer(playing, time); }

// @public
function void AddEndingTimer(int time)	  { AddTimer(ending, time); }

function void DrawTime(void)
{
	SetHudSize(480, 360, false);
	
	// Don't show if the current state is disabled.
	if (gameContext.state == playing && gameContext.playTimerDisabled) {
		terminate;
	}
	if (gameContext.state == ending && gameContext.endTimerDisabled) {
		terminate;
	}

	int time = GetTimer(gameContext.state);
	
	// Ensure the current game state has time to show.
	if (time < 0) {
		terminate;
	}
	
	// If game state is playing, the last 10 seconds will have some effects.
	if (GameStateIsPlaying())
	{
		str formattedTime = FormatTics(time, false);
		HudMessageBold(s:formattedTime; HUDMSG_FADEOUT, HUDID_BOTTOM, CR_WHITE, 240.0, 340.0, 1.0, 0.5);
	
		// This ensures the timer ticks every second for the last 10 seconds.
		bool timerCloseTick = time / 350 == 0 && time % 35 == 0;
		if (!timerCloseTick) {
			terminate;
		}
		
		// Play a sound. If time is 0, it's the end.
		int timeSecond = time / 35;
		str sound = timeSecond == 0 ? "timer/end" : "timer/one";
		AmbientSound(sound, 100);
		
		HudMessageBold(s:"0:", s:LeftPad(StrParam(d:timeSecond), '0', 2); HUDMSG_FADEOUT, HUDID_BOTTOM - 1, CR_RED, 240.0, 340.0, 0.1, 0.5);
	}
	else
	{
		HudMessageBold(s:FormatTics(time, true); HUDMSG_FADEOUT, HUDID_BOTTOM, CR_WHITE, 240.0, 340.0, 1.0, 0.5);
	}
}

// Pauses the timer. Note that this will effectively pause the timer but still show it.
// This works for every game state.
// If the timer should be fully omitted/returned for a specific mode, then use `(Disable|Enable)(Play|End)Timer` below.
// @public
function void PauseTimer(void)
{
	gameContext.timerPaused = true;
	LogDebug("Timer has been paused.");
}

// Resumes the timer. Note that this will effectively resume a paused timer.
// This works for every game state.
// If the timer should be fully omitted/returned for a specific mode, then use `(Disable|Enable)(Play|End)Timer` below.
// @public
function void ResumeTimer(void)
{
	// Failsafe check to ensure the timer does not resume after the final timer has ended.
	if (gameContext.state == ending && gameContext.endingTime == 0) {
		LogWarning("Unable to resume timer when game is ending and the timer has ended.");
		terminate;
	}
	
	gameContext.timerPaused = false;
	LogDebug("Timer has been resumed.");
}

// @public
function void DisablePlayTimer(void)
{
	gameContext.playTimerDisabled = true;
}

// @public
function void EnablePlayTimer(void)
{
	gameContext.playTimerDisabled = false;
}

// @public
function void DisableEndTimer(void)
{
	gameContext.endTimerDisabled = true;
}

// @public
function void EnableEndTimer(void)
{
	gameContext.endTimerDisabled = false;
}

script "TimerDisplay"(void)
{
	while(IsPlaying())
	{
		DrawTime();
		Delay(1);
	}
}
