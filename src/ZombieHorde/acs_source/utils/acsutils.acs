
// This is a simplified variant of ACSUtils.
// The file contains common useful functions and might be changed to contain more in the future.
// This is mostly a mess since various functions must appear before others, which is quite some work to do properly...

#libdefine MAX_PLAYERS 64

#libdefine INT_MAX 0x7fffffff
#libdefine INT_MIN 0x80000000
#libdefine FIXED_MAX (0x7fffffff)
#libdefine FIXED_MIN (0x80000000)

function int min(int a, int b)
{
	return a < b ? a : b;
}

function int max(int a, int b)
{
	return a > b ? a : b;
}

function int clamp(int x, int a, int b)
{
	return x > b ? b : x < a ? a : x;
}	

function int sgn(int x)
{
	return x == 0 ? 0 : x > 0 ? x : -x;
}

function int sgnStrict(int x)
{
	return x > 0 ? x : -x;
}

function int abs(int x)
{
	return x > 0 ? x : -x;
}

function int cmp(int a, int b)
{
	if (a > b)
		return 1;
	if (a < b)
		return -1;
	return 0;
}

function int mod(int a, int b)
{
	if (a < 0)
	{
		int rem = a % b;
		if (rem != 0)
			return b + (a % b);
		return 0;
	}
	
	return a % b;
}

// NOTE: manually replaced. `Floor()` return 0 in Zandronum.
function int CustomFloor(int x)
{
	return ((x) & 0xffff0000);
}

// NOTE: manually replaced. `Ceil()` return 0 in Zandronum.
function int CustomCeil(int x)
{
	return (((x) - 1) & 0xffff0000) + 1.0;
}

// NOTE: manually replaced. `Round()` return 0 in Zandronum.
function int CustomRound(int x)
{
	return ((x + 0.5) & 0xffff0000);
}

function int trunc(int x)
{
	return x > 0.0 ? CustomFloor(x) : CustomCeil(x);
}

function int lerp(int a, int b, int alpha)
{
	return FixedMul(a, 1.0 - alpha) + FixedMul(b, alpha);
}

function int IntDiv (int a_, int b_) {
    int a = a_;
	int b = b_;
	int quotient = 0, current_fraction = 1.0;

    if ((abs(a) / abs(b)) > 32767) {
        return 0.0;
    }

    while (current_fraction > 1) {
        quotient += (a / b) * current_fraction;
        a = (a % b) * 2;
        current_fraction /= 2;
    }

    return (quotient);
}

function bool StrIsEmpty(str s)
{
	return !GetChar(s, 0);
}

function bool StrEquals(str a, str b)
{
    return StrCmp(a, b) == 0;
}	

function bool StrIEquals(str a, str b)
{
	return StrICmp(a, b) == 0;
}

function bool StrEqualsAt(str s, int where, str what)
{
	int len = StrLen(what);
	if (where + len > StrLen(s))
		return false;
	
	return StrEquals(StrMid(s, where, len), what);
}

function bool StrIEqualsAt(str s, int where, str what)
{
	int len = StrLen(what);
	if (where + len > StrLen(s))
		return false;
	
	return StrIEquals(StrMid(s, where, len), what);
}

function bool StrStartsWith(str s, str sub)
{
	return StrEqualsAt(s, 0, sub);
}

function bool StrStartsWithI(str s, str sub)
{
	return StrIEqualsAt(s, 0, sub);
}

function bool StrEndsWith(str s, str what)
{
	int len1 = StrLen(s);
	int len2 = StrLen(what);

	if (len1 < len2)
		return false;
	return StrEqualsAt(s, len1 - len2, what);
}

function bool StrEndsWithI(str s, str what)
{
	int len1 = StrLen(s);
	int len2 = StrLen(what);

	if (len1 < len2)
		return false;
	return StrIEqualsAt(s, len1 - len2, what);
}

function int StrFindFrom(str s, str what, int start)
{
	int len = StrLen(s) - StrLen(what);
	for (int i = start; i <= len; i++)
	{
		if (StrEqualsAt(s, i, what))
			return i;
	}
	
	return -1;
}

function int StrFindFromI(str s, str what, int start)
{
	int len = StrLen(s) - StrLen(what);
	for (int i = start; i <= len; i++)
	{
		if (StrIEqualsAt(s, i, what))
			return i;
	}
	
	return -1;
}

function int StrRFindFrom(str s, str what, int start)
{
	int len = StrLen(s) - StrLen(what);
	for (int i = start; i >= 0; i--)
	{
		if (StrEqualsAt(s, i, what))
			return i;
	}
	
	return -1;
}

function int StrRFindFromI(str s, str what, int start)
{
	int len = StrLen(s) - StrLen(what);
	for (int i = start; i >= 0; i--)
	{
		if (StrIEqualsAt(s, i, what))
			return i;
	}
	
	return -1;
}

function int StrFind(str s, str what)
{
	return StrFindFrom(s, what, 0);
}

function int StrFindI(str s, str what)
{
	return StrFindFromI(s, what, 0);
}

function int StrRFind(str s, str what)
{
	return StrRFindFrom(s, what, StrLen(s) - 1);
}

function int StrRFindI(str s, str what)
{
	return StrRFindFromI(s, what, StrLen(s) - 1);
}

function str StrRightFrom(str s, int from)
{
	return StrRight(s, StrLen(s) - from);
}

function str StrCut(str s, int start, int length)
{
	return StrParam(s:StrLeft(s, start), s:StrRightFrom(s, start + length));
}

function str StrCutRange(str s, int start, int end)
{
	return StrParam(s:StrLeft(s, start), s:StrRightFrom(s, end));
}

function str StrInsert(str s, int where, str what)
{
	return StrParam(s:StrLeft(s, where), s:what, s:StrRightFrom(s, where));
}

function str StrSlice(str s, int start, int end)
{
	return StrMid(s, start, end - start);
}

function str StrRemoveFirstFrom(str s, str what, int start)
{
	int pos = StrFindFrom(s, what, start);
	if (pos != -1)
		return StrCut(s, pos, StrLen(what));
	return s;
}

function str StrRemoveFirstFromI(str s, str what, int start)
{
	int pos = StrFindFromI(s, what, start);
	if (pos != -1)
		return StrCut(s, pos, StrLen(what));
	return s;
}

function str StrRemoveLastFrom(str s, str what, int start)
{
	int pos = StrRFindFrom(s, what, start);
	if (pos != -1)
		return StrCut(s, pos, StrLen(what));
	return s;
}

function str StrRemoveLastFromI(str s, str what, int start)
{
	int pos = StrRFindFromI(s, what, start);
	if (pos != -1)
		return StrCut(s, pos, StrLen(what));
	return s;
}

function str StrReplace(str s, str what, str with)
{
	int len1 = StrLen(s);
	int len2 = StrLen(what);
	int start = 0;
	int end = 0;
	str result = "";

	while (true)
	{
		end = StrFindFrom(s, what, start);
		if (end == -1)
		{
			result = StrParam(s:result, s:StrSlice(s, start, end));
			break;
		}

		result = StrParam(s:result, s:StrSlice(s, start, end), s:with);
		start = end + len2;
	}
	
	return result;
}

function str StrReplaceI(str s, str what, str with)
{
	int len1 = StrLen(s);
	int len2 = StrLen(what);
	int start = 0;
	int end = 0;
	str result = "";

	while (true)
	{
		end = StrFindFromI(s, what, start);
		if (end == -1)
		{
			result = StrParam(s:result, s:StrSlice(s, start, end));
			break;
		}

		result = StrParam(s:result, s:StrSlice(s, start, end), s:with);
		start = end + len2;
	}
	
	return result;
}

function str StrRemove(str s, str what)
{
	return StrReplace(s, what, "");
}

function str StrRemoveI(str s, str what)
{
	return StrReplaceI(s, what, "");
}

function str StrReplaceFirstFrom(str s, str what, str with, int start)
{
	int pos = StrFind(s, what);
	if (pos != -1)
		return StrInsert(StrCut(s, pos, StrLen(what)), pos, with);
	return s;
}

function str StrReplaceFirstFromI(str s, str what, str with, int start)
{
	int pos = StrFindI(s, what);
	if (pos != -1)
		return StrInsert(StrCut(s, pos, StrLen(what)), pos, with);
	return s;
}

function str StrReplaceLastFrom(str s, str what, str with, int start)
{
	int pos = StrRFind(s, what);
	if (pos != -1)
		return StrInsert(StrCut(s, pos, StrLen(what)), pos, with);
	return s;
}

function str StrReplaceLastFromI(str s, str what, str with, int start)
{
	int pos = StrRFindI(s, what);
	if (pos != -1)
		return StrInsert(StrCut(s, pos, StrLen(what)), pos, with);
	return s;
}

function str StrRemoveFirst(str s, str what)
{
	return StrRemoveFirstFrom(s, what, 0);
}

function str StrRemoveFirstI(str s, str what)
{
	return StrRemoveFirstFromI(s, what, 0);
}

function str StrRemoveLast(str s, str what)
{
	return StrRemoveLastFrom(s, what, StrLen(s) - 1);
}

function str StrRemoveLastI(str s, str what)
{
	return StrRemoveLastFromI(s, what, StrLen(s) - 1);
}

function str StrReplaceFirst(str s, str what, str with)
{
	return StrReplaceFirstFrom(s, what, with, 0);
}

function str StrReplaceFirstI(str s, str what, str with)
{
	return StrReplaceFirstFromI(s, what, with, 0);
}

function str StrReplaceLast(str s, str what, str with)
{
	return StrReplaceLastFrom(s, what, with, StrLen(s) - 1);
}

function str StrReplaceLastI(str s, str what, str with)
{
	return StrReplaceLastFromI(s, what, with, StrLen(s) - 1);
}

function bool StrContains(str s, str what)
{
	return StrFind(s, what) >= 0;
}

function bool StrContainsI(str s, str what)
{
	return StrFindI(s, what) >= 0;
}

#libdefine COLORCODE 28

#define ACSUTILS_ISALNUM 1<<0
#define ACSUTILS_ISALPHA 1<<1
#define ACSUTILS_ISBLANK 1<<2
#define ACSUTILS_ISCNTRL 1<<3
#define ACSUTILS_ISDIGIT 1<<4
#define ACSUTILS_ISGRAPH 1<<5
#define ACSUTILS_ISLOWER 1<<6
#define ACSUTILS_ISPRINT 1<<7
#define ACSUTILS_ISPUNCT 1<<8
#define ACSUTILS_ISSPACE 1<<9
#define ACSUTILS_ISUPPER 1<<10
#define ACSUTILS_ISXDIGIT 1<<11

int ACSUtils_AsciiTypes[128] =
{
ACSUTILS_ISCNTRL, // NUL
ACSUTILS_ISCNTRL, // SOH
ACSUTILS_ISCNTRL, // STX
ACSUTILS_ISCNTRL, // ETX
ACSUTILS_ISCNTRL, // EOT
ACSUTILS_ISCNTRL, // ENQ
ACSUTILS_ISCNTRL, // ACK
ACSUTILS_ISCNTRL, // BEL
ACSUTILS_ISCNTRL, // BS
ACSUTILS_ISBLANK | ACSUTILS_ISCNTRL | ACSUTILS_ISSPACE, // TAB
ACSUTILS_ISCNTRL | ACSUTILS_ISSPACE, // LF
ACSUTILS_ISCNTRL | ACSUTILS_ISSPACE, // VT
ACSUTILS_ISCNTRL | ACSUTILS_ISSPACE, // FF
ACSUTILS_ISCNTRL | ACSUTILS_ISSPACE, // CR
ACSUTILS_ISCNTRL, // SO
ACSUTILS_ISCNTRL, // SI
ACSUTILS_ISCNTRL, // DLE
ACSUTILS_ISCNTRL, // DC1
ACSUTILS_ISCNTRL, // DC2
ACSUTILS_ISCNTRL, // DC3
ACSUTILS_ISCNTRL, // DC4
ACSUTILS_ISCNTRL, // NAK
ACSUTILS_ISCNTRL, // SYN
ACSUTILS_ISCNTRL, // ETB
ACSUTILS_ISCNTRL, // CAN
ACSUTILS_ISCNTRL, // EM
ACSUTILS_ISCNTRL, // SUB
ACSUTILS_ISCNTRL, // ESC
ACSUTILS_ISCNTRL, // FS (COLORCODE)
ACSUTILS_ISCNTRL, // GS
ACSUTILS_ISCNTRL, // RS
ACSUTILS_ISCNTRL, // US
ACSUTILS_ISBLANK | ACSUTILS_ISPRINT | ACSUTILS_ISSPACE, // Space
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // !
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // "
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // #
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // $
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // %
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // &
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // '
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // (
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // )
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // *
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // +
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // ,
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // -
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // .
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // /
ACSUTILS_ISALNUM | ACSUTILS_ISDIGIT | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISXDIGIT, // 0
ACSUTILS_ISALNUM | ACSUTILS_ISDIGIT | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISXDIGIT, // 1
ACSUTILS_ISALNUM | ACSUTILS_ISDIGIT | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISXDIGIT, // 2
ACSUTILS_ISALNUM | ACSUTILS_ISDIGIT | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISXDIGIT, // 3
ACSUTILS_ISALNUM | ACSUTILS_ISDIGIT | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISXDIGIT, // 4
ACSUTILS_ISALNUM | ACSUTILS_ISDIGIT | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISXDIGIT, // 5
ACSUTILS_ISALNUM | ACSUTILS_ISDIGIT | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISXDIGIT, // 6
ACSUTILS_ISALNUM | ACSUTILS_ISDIGIT | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISXDIGIT, // 7
ACSUTILS_ISALNUM | ACSUTILS_ISDIGIT | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISXDIGIT, // 8
ACSUTILS_ISALNUM | ACSUTILS_ISDIGIT | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISXDIGIT, // 9
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // :
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // ;
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // <
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // =
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // >
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // ?
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // @
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER | ACSUTILS_ISXDIGIT, // A
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER | ACSUTILS_ISXDIGIT, // B
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER | ACSUTILS_ISXDIGIT, // C
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER | ACSUTILS_ISXDIGIT, // D
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER | ACSUTILS_ISXDIGIT, // E
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER | ACSUTILS_ISXDIGIT, // F
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER, // G
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER, // H
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER, // I
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER, // J
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER, // K
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER, // L
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER, // M
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER, // N
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER, // O
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER, // P
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER, // Q
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER, // R
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER, // S
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER, // T
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER, // U
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER, // V
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER, // W
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER, // X
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER, // Y
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISUPPER, // Z
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // [
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // \
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // ]
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // ^
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // _
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // `
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT | ACSUTILS_ISXDIGIT, // a
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT | ACSUTILS_ISXDIGIT, // b
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT | ACSUTILS_ISXDIGIT, // c
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT | ACSUTILS_ISXDIGIT, // d
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT | ACSUTILS_ISXDIGIT, // e
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT | ACSUTILS_ISXDIGIT, // f
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT, // g
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT, // h
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT, // i
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT, // j
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT, // k
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT, // l
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT, // m
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT, // n
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT, // o
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT, // p
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT, // q
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT, // r
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT, // s
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT, // t
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT, // u
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT, // v
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT, // w
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT, // x
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT, // y
ACSUTILS_ISALNUM | ACSUTILS_ISALPHA | ACSUTILS_ISGRAPH | ACSUTILS_ISLOWER | ACSUTILS_ISPRINT, // z
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // {
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // |
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // }
ACSUTILS_ISGRAPH | ACSUTILS_ISPRINT | ACSUTILS_ISPUNCT, // ~
ACSUTILS_ISCNTRL, // DEL
};

function bool isalnum(int c)
{
	return (ACSUtils_AsciiTypes[c] & ACSUTILS_ISALNUM);
}

function bool isalpha(int c)
{
	return (ACSUtils_AsciiTypes[c] & ACSUTILS_ISALPHA);
}

function bool isblank(int c)
{
	return (ACSUtils_AsciiTypes[c] & ACSUTILS_ISBLANK);
}

function bool iscntrl(int c)
{
	return (ACSUtils_AsciiTypes[c] & ACSUTILS_ISCNTRL);
}

function bool isdigit(int c)
{
	return (ACSUtils_AsciiTypes[c] & ACSUTILS_ISDIGIT);
}

function bool isgraph(int c)
{
	return (ACSUtils_AsciiTypes[c] & ACSUTILS_ISGRAPH);
}

function bool islower(int c)
{
	return (ACSUtils_AsciiTypes[c] & ACSUTILS_ISLOWER);
}

function bool isprint(int c)
{
	return (ACSUtils_AsciiTypes[c] & ACSUTILS_ISPRINT);
}

function bool ispunct(int c)
{
	return (ACSUtils_AsciiTypes[c] & ACSUTILS_ISPUNCT);
}

function bool isspace(int c)
{
	return (ACSUtils_AsciiTypes[c] & ACSUTILS_ISSPACE);
}

function bool isupper(int c)
{
	return (ACSUtils_AsciiTypes[c] & ACSUTILS_ISUPPER);
}

function bool isxdigit(int c)
{
	return (ACSUtils_AsciiTypes[c] & ACSUTILS_ISXDIGIT);
}

function bool isascii(int c)
{
	return c >= 0 && c < 128;
}

function int toupper(int c)
{
	if (islower(c))
		return c - 32;
	return c;
}

function int tolower(int c)
{
	if (isupper(c))
		return c + 32;
	return c;
}

function bool IsColorCodeChar(int c)
{
	return (c >= 'a' && c <= 'v')
		|| c == '-'
		|| c == '+'
		|| c == '*'
		|| c == '!';
}

function int SkipColorCodeAt(str s, int i)
{
	if (GetChar(s, i) == COLORCODE)
	{
		i++;
	}
	else
	{
		return i;
	}
	
	if (GetChar(s, i) == '[')
	{
		int len = StrLen(s);
		for (; i < len; i++)
		{
			if (GetChar(s, i) == ']')
			{
				i++;
				break;
			}
		}
	}
	else if (IsColorCodeChar(GetChar(s, i)))
	{
		return i + 1;
	}
	
	return i;
}
	
function str GetColorCodeAt(str s, int i)
{
	return StrSlice(s, i, SkipColorCodeAt(s, i));
}
	
function bool HasColorCodes(str s)
{
	int len = StrLen(s);
	for (int i = 0; i < len; i++)
	{
		if (GetChar(s, i) == COLORCODE)
			i += 1;
		else
			continue;
			
		int c = GetChar(s, i);
		if (c == '[' || IsColorCodeChar(c))
			return true;
	}
	return false;
}

function str StripColorCodes(str s)
{
	str result = "";
	for (int i = 0; i < StrLen(s); i++)
	{
		i = SkipColorCodeAt(s, i);
		result = StrParam(s:result, c:GetChar(s, i));
	}

	return result;
}

function bool IsPlayer(void)
{
	return PlayerNumber() >= 0;
}

function str ActivatorName(void)
{
	return StrParam(n:0);
}

function str PlayerName(int player)
{
	return StrParam(n:player + 1);
}

script "ACSUtils_GetActorName" (int tid)
{
	SetActivator(tid);
	SetResultValue((StrParam(n:0)));
}

function str GetActorName(int tid)
{
	return ACS_NamedExecuteWithResult("ACSUtils_GetActorName", tid);
}

function bool IsAlive(void)
{
	if (IsPlayer())
		if (!PlayerInGame(PlayerNumber()))
			return false;
	return GetActorProperty(0, APROP_HEALTH) > 0;
}

function bool ActorIsAlive(int tid)
{
	if (tid == 0 && IsPlayer())
		if (!PlayerInGame(PlayerNumber()))
			return false;
	return GetActorProperty(tid, APROP_HEALTH) > 0;
}

function void ClearHudMessage(int id)
{
	HudMessage(s:""; HUDMSG_PLAIN, id, 0, 0.0, 0.0, 0.0, 0.0);
}

function void ClearHudMessageBold(int id)
{
	HudMessageBold(s:""; HUDMSG_PLAIN, id, 0, 0.0, 0.0, 0.0, 0.0);
}

function bool KeyBound (str key)
{
	if (PlayerNumber() == -1)
	{
		return false;
	}
	return !StrEquals(StrParam(k:key), StrParam(s:"??? (", s:key, s:")"));
}

function bool KeyUp(int key)
{
	int buttons = GetPlayerInput(-1, INPUT_BUTTONS);

	if ((~buttons & key) == key) { return true; }
		return false;
}

function bool KeyUpAny(int key)
{
	int buttons = GetPlayerInput(-1, INPUT_BUTTONS);

	if (~buttons & key) { return true; }
		return false;
}

function bool PlayerKeyUp(int player, int key)
{
	int buttons = GetPlayerInput(player, INPUT_BUTTONS);

	if ((~buttons & key) == key) { return true; }
		return false;
}

function bool PlayerKeyUpAny(int player, int key)
{
	int buttons = GetPlayerInput(player, INPUT_BUTTONS);

	if (~buttons & key) { return true; }
		return false;
}


function bool KeyDown(int key)
{
	int buttons = GetPlayerInput(-1, INPUT_BUTTONS);

	if ((buttons & key) == key) { return true; }
		return false;
}

function bool KeyDownAny(int key)
{
	int buttons = GetPlayerInput(-1, INPUT_BUTTONS);

	if (buttons & key) { return true; }
		return false;
}

function bool PlayerKeyDown(int player, int key)
{
	int buttons = GetPlayerInput(player, INPUT_BUTTONS);

	if ((buttons & key) == key) { return true; }
		return false;
}

function bool PlayerKeyDownAny(int player, int key)
{
	int buttons = GetPlayerInput(player, INPUT_BUTTONS);

	if (buttons & key) { return true; }
		return false;
}


function bool KeyPressed(int key)
{
	int buttons     = GetPlayerInput(-1, INPUT_BUTTONS);
	int oldbuttons  = GetPlayerInput(-1, INPUT_OLDBUTTONS);
	int newbuttons  = (buttons ^ oldbuttons) & buttons;

	if ((newbuttons & key) == key) { return true; }
		return false;
}

function bool KeyPressedAny(int key)
{
	int buttons     = GetPlayerInput(-1, INPUT_BUTTONS);
	int oldbuttons  = GetPlayerInput(-1, INPUT_OLDBUTTONS);
	int newbuttons  = (buttons ^ oldbuttons) & buttons;

	if (newbuttons & key) { return true; }
		return false;
}

function bool PlayerKeyPressed(int player, int key)
{
	int buttons     = GetPlayerInput(player, INPUT_BUTTONS);
	int oldbuttons  = GetPlayerInput(player, INPUT_OLDBUTTONS);
	int newbuttons  = (buttons ^ oldbuttons) & buttons;

	if ((newbuttons & key) == key) { return true; }
		return false;
}

function bool PlayerKeyPressedAny(int player, int key)
{
	int buttons     = GetPlayerInput(player, INPUT_BUTTONS);
	int oldbuttons  = GetPlayerInput(player, INPUT_OLDBUTTONS);
	int newbuttons  = (buttons ^ oldbuttons) & buttons;

	if (newbuttons & key) { return true; }
		return false;
}


function bool KeyReleased(int key)
{
	int buttons     = GetPlayerInput(-1, INPUT_BUTTONS);
	int oldbuttons  = GetPlayerInput(-1, INPUT_OLDBUTTONS);
	int newbuttons  = (buttons ^ oldbuttons) & oldbuttons;

	if ((newbuttons & key) == key) { return true; }
		return false;
}

function bool KeyReleasedAny(int key)
{
	int buttons     = GetPlayerInput(-1, INPUT_BUTTONS);
	int oldbuttons  = GetPlayerInput(-1, INPUT_OLDBUTTONS);
	int newbuttons  = (buttons ^ oldbuttons) & oldbuttons;

	if (newbuttons & key) { return true; }
		return false;
}

function bool PlayerKeyReleased(int player, int key)
{
	int buttons     = GetPlayerInput(player, INPUT_BUTTONS);
	int oldbuttons  = GetPlayerInput(player, INPUT_OLDBUTTONS);
	int newbuttons  = (buttons ^ oldbuttons) & oldbuttons;

	if ((newbuttons & key) == key) { return true; }
		return false;
}

function bool PlayerKeyReleasedAny(int player, int key)
{
	int buttons     = GetPlayerInput(player, INPUT_BUTTONS);
	int oldbuttons  = GetPlayerInput(player, INPUT_OLDBUTTONS);
	int newbuttons  = (buttons ^ oldbuttons) & oldbuttons;

	if (newbuttons & key) { return true; }
		return false;
}


function bool KeyToggled(int key)
{
	int buttons     = GetPlayerInput(-1, INPUT_BUTTONS);
	int oldbuttons  = GetPlayerInput(-1, INPUT_OLDBUTTONS);
	int newbuttons  = (buttons ^ oldbuttons);

	if ((newbuttons & key) == key) { return true; }
		return false;
}

function bool KeyToggledAny(int key)
{
	int buttons     = GetPlayerInput(-1, INPUT_BUTTONS);
	int oldbuttons  = GetPlayerInput(-1, INPUT_OLDBUTTONS);
	int newbuttons  = (buttons ^ oldbuttons);

	if (newbuttons & key) { return true; }
		return false;
}

function bool PlayerKeyToggled(int player, int key)
{
	int buttons     = GetPlayerInput(player, INPUT_BUTTONS);
	int oldbuttons  = GetPlayerInput(player, INPUT_OLDBUTTONS);
	int newbuttons  = (buttons ^ oldbuttons);

	if ((newbuttons & key) == key) { return true; }
		return false;
}

function bool PlayerKeyToggledAny(int player, int key)
{
	int buttons     = GetPlayerInput(player, INPUT_BUTTONS);
	int oldbuttons  = GetPlayerInput(player, INPUT_OLDBUTTONS);
	int newbuttons  = (buttons ^ oldbuttons);

	if (newbuttons & key) { return true; }
		return false;
}

function int GetActorWaterlevel(int tid) { return GetActorProperty(tid, APROP_Waterlevel); }