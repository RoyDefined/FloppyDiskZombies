
enum LogSeverity { debug, info, warning, error };

function void LogMessageSeverity(str message, LogSeverity severity)
{
	str color = severity == debug ? "j" :
		severity == info ? "n" :
		severity == warning ? "k" :
		"g";	
	str prefix = severity == debug ? "debug" :
		severity == info ? "info" :
		severity == warning ? "warning" :
		"error";	
	str formatted = StrParam(s:"\c", s:color, s:prefix, s:": \cj", s:message);
	if(!NamedSendNetworkString("LogMessageClientside", formatted)) {
		Log(s:"\cgError\cj: A log message with severity could not be delivered to clients.");
	}
}

function void LogMessageClient(str message, int clientId)
{
	// Don't need to send to bots.
	if (PlayerIsBot(clientId)) {
		terminate;
	}
	
	if(!NamedSendNetworkString("LogMessageClientside", message, clientId)) {
		Log(s:"\cgError\cj: A log message could not be delivered to a client.");
	}
}

function void LogMessage(str message)
{
	if(!NamedSendNetworkString("LogMessageClientside", message)) {
		Log(s:"\cgError\cj: A log message could not be delivered to clients.");
	}
}

function void LogDebug(str message)
{
	LogMessageSeverity(message, debug);
}

function void LogInfo(str message)
{
	LogMessageSeverity(message, info);
}

function void LogWarning(str message)
{
	LogMessageSeverity(message, warning);
}

function void LogError(str message)
{
	LogMessageSeverity(message, error);
}

script "LogMessageClientside" (int stringInt) net clientside
{
	// If logging offline, the script will be executed on the local machine.
	// This means the activator is slightly different.
	if (!IsMultiplayer()) {
		if (!SetActivatorToPlayer(ConsolePlayerNumber()))
		{
			Log(s:"\cgError\cj: Activator could not be switched for offline log message.");
		}
	}

	str string = StrParam(s:stringInt);
	
	/* log("-------------------------------------------------------------");
	log(s:string);
	log(d:PlayerNumber());
	log(d:ConsolePlayerNumber());
	log(d:GetCvar("developer"));
	log(d:GetCvar("cl_zh_developer"));
	log(s:StrStartsWith(string, "\cj") ? "true" : "false");
	log("-------------------------------------------------------------"); */
	
	// Debug messages require the "cl_zh_developer" cvar to be enabled.
	if (StrStartsWith(string, "\cjdebug")) {
	
		// Production will never have debug messages.
#ifndef dev
		terminate;
#endif
		if (!GetCvar("developer") && !GetCvar("cl_zh_developer")) {
			terminate;
		}
	}
	
	Log(s:string);
}