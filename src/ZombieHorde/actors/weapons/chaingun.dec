// This determines if the chaingun is spinning.
actor ChaingunSpinning : Boolean {}

// This determines the heat value of the chaingun.
// Reaching the maximum starts a cooldown state.
actor Chaingunheat : Ammo
{
	inventory.Icon "CLIPA0"
	inventory.MaxAmount 50
}

actor ZHChaingunSpawn : ZHWeaponSpawn 8002
{
	inventory.pickupmessage "Chaingun"
	tag "Chaingun"
	
	scale 0.8
	
	states
	{
		Spawn:
			CGGS A -1
			stop
		
		Pickup:
			TNT1 A 0 A_JumpIf(CallACS("ScriptIsHuman", 0, 0, 0) == true, "PickupSuccess")
			stop
		PickupSuccess:
			TNT1 A 0 A_GiveInventory("ZHChaingun", 1)
			stop
	}
}

actor ZHChaingun : ZHWeapon
{
	tag "Chaingun"
	
	scale 0.8
	weapon.SlotNumber 4
	weapon.KickBack 250
	
	weapon.AmmoUse 0
	weapon.AmmoGive 0
	weapon.AmmoType "Chaingunheat"
   
	states
	{
		// The ready state determines the sprite based on the chaingun's heat.
		Ready:
			TNT1 A 0 A_JumpIfInventory("ChaingunSpinning", 1, "Ready.Spinning")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 40, "Ready.Heat5")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 30, "Ready.Heat4")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 20, "Ready.Heat3")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 10, "Ready.Heat2")
		Ready.Heat1:
			CGS1 A 0
			goto Ready.Rest
		Ready.Heat2:
			CGS2 A 0
			goto Ready.Rest
		Ready.Heat3:
			CGS3 A 0
			goto Ready.Rest
		Ready.Heat4:
			CGS4 A 0
			goto Ready.Rest
		Ready.Heat5:
			CGS5 A 0
		Ready.Rest:
			"####" A 1 A_WeaponReady
			goto Ready
			
		// The select state determines the sprite based on the chaingun's heat.
		Select:
			TNT1 A 0 A_Raise
			TNT1 A 0 A_WeaponReady
			TNT1 A 0 A_PlaySoundEx("weapons/chaingun/DEPLOY", "SoundSlot6")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 40, "Select.Heat5")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 30, "Select.Heat4")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 20, "Select.Heat3")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 10, "Select.Heat2")
		Select.Heat1:
			CGG1 A 0
			goto Select.Rest
		Select.Heat2:
			CGG2 A 0
			goto Select.Rest
		Select.Heat3:
			CGG3 A 0
			goto Select.Rest
		Select.Heat4:
			CGG4 A 0
			goto Select.Rest
		Select.Heat5:
			CGG5 A 0
		Select.Rest:
			"####" ABCD 2 A_WeaponReady(WRF_NOFIRE)
			TNT1 A 0 A_PlaySoundEx("weapons/chaingun/TURN","SoundSlot5")
			goto Ready
		
		// The deselect state determines the sprite based on the chaingun's heat.
		Deselect:
			TNT1 A 0 A_TakeInventory("ChaingunSpinning", 1)
			TNT1 A 0 A_StopSoundEx("SoundSlot6")
			TNT1 A 0 A_PlaySoundEx("weapons/chaingun/DESELECT", "SoundSlot5")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 40, "Deselect.Heat5")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 30, "Deselect.Heat4")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 20, "Deselect.Heat3")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 10, "Deselect.Heat2")
		Deselect.Heat1:
			CGG1 A 0
			goto Deselect.Rest
		Deselect.Heat2:
			CGG2 A 0
			goto Deselect.Rest
		Deselect.Heat3:
			CGG3 A 0
			goto Deselect.Rest
		Deselect.Heat4:
			CGG4 A 0
			goto Deselect.Rest
		Deselect.Heat5:
			CGG5 A 0
		Deselect.Rest:
			"####" DCBA 2
			TNT1 A 0 A_Lower
			wait
		
		// Ready state, but the chaingun is spinning.
		// The state determines the sprite based on the chaingun's heat.
		// We show all four frames before we determine the state based on heat again.
		Ready.Spinning:
			TNT1 A 0 A_PlaySoundEx("weapons/chaingun/WINDLOOP", "SoundSlot6", true)
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 40, "Ready.SpinningHeat5")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 30, "Ready.SpinningHeat4")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 20, "Ready.SpinningHeat3")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 10, "Ready.SpinningHeat2")
		Ready.SpinningHeat1:
			CGS1 A 0
			goto Ready.SpinningRest
		Ready.SpinningHeat2:
			CGS2 A 0
			goto Ready.SpinningRest
		Ready.SpinningHeat3:
			CGS3 A 0
			goto Ready.SpinningRest
		Ready.SpinningHeat4:
			CGS4 A 0
			goto Ready.SpinningRest
		Ready.SpinningHeat5:
			CGS5 A 0
		Ready.SpinningRest:
			"####" ABCD 1 A_WeaponReady
			Goto Ready.Spinning
			
		// Chaingun wind up.
		// The state determines the sprite based on the chaingun's heat.
		WindUp:
			TNT1 A 0 A_GiveInventory("ChaingunSpinning", 1)
			TNT1 A 0 A_PlaySoundEx("weapons/chaingun/WINDUP", "SoundSlot6")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 40, "WindUp.Heat5")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 30, "WindUp.Heat4")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 20, "WindUp.Heat3")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 10, "WindUp.Heat2")
		WindUp.Heat1:
			CGS1 A 0
			goto WindUp.Rest
		WindUp.Heat2:
			CGS2 A 0
			goto WindUp.Rest
		WindUp.Heat3:
			CGS3 A 0
			goto WindUp.Rest
		WindUp.Heat4:
			CGS4 A 0
			goto WindUp.Rest
		WindUp.Heat5:
			CGS5 A 0
		WindUp.Rest:
			"####" B 1 A_WeaponReady(WRF_NOFIRE)
			"####" CD 4 A_WeaponReady(WRF_NOFIRE)
			"####" AB 3 A_WeaponReady(WRF_NOFIRE)
			"####" CD 2 A_WeaponReady(WRF_NOFIRE)
			goto Ready
		
		// Chaingun wind down.
		// The state determines the sprite based on the chaingun's heat.
		WindDown:
			TNT1 A 0 A_TakeInventory("ChaingunSpinning", 1)
			TNT1 A 0 A_PlaySoundEx("weapons/chaingun/WINDDOWN", "SoundSlot6", false)
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 40, "WindDown.Heat5")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 30, "WindDown.Heat4")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 20, "WindDown.Heat3")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 10, "WindDown.Heat2")
		WindDown.Heat1:
			CGS1 A 0
			goto WindDown.Rest
		WindDown.Heat2:
			CGS2 A 0
			goto WindDown.Rest
		WindDown.Heat3:
			CGS3 A 0
			goto WindDown.Rest
		WindDown.Heat4:
			CGS4 A 0
			goto WindDown.Rest
		WindDown.Heat5:
			CGS5 A 0
		WindDown.Rest:
			"####" ABCD 2 A_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE)
			"####" AB 3 A_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE)
			"####" CD 4 A_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE)
			Goto Ready
		
		Fire:
			TNT1 A 0 A_JumpIfInventory("ChaingunSpinning", 1, "Fire.Start")
			Goto WindUp
		Fire.Start:
			TNT1 A 0 ACS_NamedExecute("ScriptSetWeaponFiring", 0, true)
		Fire.Concurrent:
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 50, "Fire.Overheated")
			
			// The chaingun will sound a warning if close to overheating.
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 30, "Fire.Warn")
			goto Fire.State
		Fire.Warn:
			TNT1 A 0 A_PlaySoundEx("weapons/chaingun/WARNING", "SoundSlot5")
			
		// The state determines the sprite based on the chaingun's heat.
		Fire.State:
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 50, "WindDown")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 40, "Fire.Heat5")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 30, "Fire.Heat4")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 20, "Fire.Heat3")
			TNT1 A 0 A_JumpIfInventory("Chaingunheat", 10, "Fire.Heat2")
		Fire.Heat1:
			CGS1 A 0
			goto Fire.Rest
		Fire.Heat2:
			CGS2 A 0
			goto Fire.Rest
		Fire.Heat3:
			CGS3 A 0
			goto Fire.Rest
		Fire.Heat4:
			CGS4 A 0
			goto Fire.Rest
		Fire.Heat5:
			CGS5 A 0
		Fire.Rest:
			"####" A 0 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH)
			"####" A 0 A_GiveInventory("Chaingunheat", 1)
			
			"####" A 0 A_PlaySound("weapons/chaingun/FIRE", CHAN_WEAPON)
			"####" A 0 Radius_Quake(1, 6, 0, 1, 0)
			"####" A 0 A_FireBullets (6.0, 3.5, -1, 5, "BulletPuff", FBF_NORANDOM)
			"####" A 0 A_AlertMonsters
			"####" A 0 A_SetPitch(pitch-1.0)
			"####" E 1 bright A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH)
			"####" A 0 A_SetPitch(pitch+0.5)
			"####" BCD 1 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH)
			TNT1 A 0 A_SetPitch(pitch+0.5)
			TNT1 A 0 A_ReFire("Fire.Concurrent")
			TNT1 A 0 ACS_NamedExecute("ScriptSetWeaponFiring", 0, false)
			goto Ready.Spinning
		
		// Called when the weapon overheated during firing.
		Fire.Overheated:
			TNT1 A 0 ACS_NamedExecute("ScriptSetWeaponFiring", 0, false)
			CGS5 ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCD 1 A_WeaponReady(WRF_NOFIRE)
			goto Ready

		AltFire:
			TNT1 A 0 A_JumpIfInventory("ChaingunSpinning", 1, "WindDown")
			goto WindUp
   }
}
